# coding: utf-8

"""
    virusapi

    The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdditionalAdvancedScanInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contains_json': 'bool',
        'contains_xml': 'bool',
        'contains_image': 'bool'
    }

    attribute_map = {
        'contains_json': 'ContainsJSON',
        'contains_xml': 'ContainsXML',
        'contains_image': 'ContainsImage'
    }

    def __init__(self, contains_json=None, contains_xml=None, contains_image=None):  # noqa: E501
        """AdditionalAdvancedScanInformation - a model defined in Swagger"""  # noqa: E501

        self._contains_json = None
        self._contains_xml = None
        self._contains_image = None
        self.discriminator = None

        if contains_json is not None:
            self.contains_json = contains_json
        if contains_xml is not None:
            self.contains_xml = contains_xml
        if contains_image is not None:
            self.contains_image = contains_image

    @property
    def contains_json(self):
        """Gets the contains_json of this AdditionalAdvancedScanInformation.  # noqa: E501

        True if the input file contains JSON data, false otherwise; this is not a threat signal  # noqa: E501

        :return: The contains_json of this AdditionalAdvancedScanInformation.  # noqa: E501
        :rtype: bool
        """
        return self._contains_json

    @contains_json.setter
    def contains_json(self, contains_json):
        """Sets the contains_json of this AdditionalAdvancedScanInformation.

        True if the input file contains JSON data, false otherwise; this is not a threat signal  # noqa: E501

        :param contains_json: The contains_json of this AdditionalAdvancedScanInformation.  # noqa: E501
        :type: bool
        """

        self._contains_json = contains_json

    @property
    def contains_xml(self):
        """Gets the contains_xml of this AdditionalAdvancedScanInformation.  # noqa: E501

        True if the input file contains XML data, false otherwise; this is not a threat signal  # noqa: E501

        :return: The contains_xml of this AdditionalAdvancedScanInformation.  # noqa: E501
        :rtype: bool
        """
        return self._contains_xml

    @contains_xml.setter
    def contains_xml(self, contains_xml):
        """Sets the contains_xml of this AdditionalAdvancedScanInformation.

        True if the input file contains XML data, false otherwise; this is not a threat signal  # noqa: E501

        :param contains_xml: The contains_xml of this AdditionalAdvancedScanInformation.  # noqa: E501
        :type: bool
        """

        self._contains_xml = contains_xml

    @property
    def contains_image(self):
        """Gets the contains_image of this AdditionalAdvancedScanInformation.  # noqa: E501

        True if the input file contains an image  # noqa: E501

        :return: The contains_image of this AdditionalAdvancedScanInformation.  # noqa: E501
        :rtype: bool
        """
        return self._contains_image

    @contains_image.setter
    def contains_image(self, contains_image):
        """Sets the contains_image of this AdditionalAdvancedScanInformation.

        True if the input file contains an image  # noqa: E501

        :param contains_image: The contains_image of this AdditionalAdvancedScanInformation.  # noqa: E501
        :type: bool
        """

        self._contains_image = contains_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalAdvancedScanInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalAdvancedScanInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
